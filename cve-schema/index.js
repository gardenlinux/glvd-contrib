import $RefParser from "@apidevtools/json-schema-ref-parser";
import { writeFile } from 'node:fs/promises';

class db_table {
  constructor(name, properties) {
    this.name = name;
    this.properties = properties;
  }
}

let tables = [];

function undefinedSafeKeys(obj) {
  if (obj === undefined) {
    return ['id'];
  } else {
    return Object.keys(obj);
  }
}

function traverse(name, obj) {
  if (obj === undefined || obj?.type === undefined) {
    console.log(`${name} is undefined`);
    return;
  }
  if (Array.isArray(obj)) {
    console.log(JSON.stringify(obj))
    return;
  }
  if (obj?.type == "object") {
    console.log(`${name} object`);
   // return Object.entries(obj).map(o => traverse(name, o.properties));
   return Object.entries(obj.properties).map(o => (traverse(o[0], o[1])))
  //  return traverse(name, obj.properties)

  }
  if (obj?.type == "array") {
    console.log(`${name} array`);

    // return Object.entries(obj).map(o => traverse(name, o.items));
    return Object.entries(obj.items?.properties || {}).filter(x => x !== undefined && x !== null).map(o => (traverse(o[0], o[1])))

  }
  if (obj?.type == "string" || obj?.type === "boolean" || obj?.type === "number") {
    console.log(`${name} ${obj?.type}`);

    return `${name} ${obj?.type}`;

  }
  console.log(`${name} other`);
  console.log(`${name} ${obj?.type}`);
  return Object.entries(obj).map(o => {
    traverse(o[0], o[1]);
  }
  );
}

try {
  const nistCveApiSchema = 'https://csrc.nist.gov/schema/nvd/api/2.0/cve_api_json_2.0.schema';
  let mergedNistCveApiSchema = await $RefParser.dereference(nistCveApiSchema, { mutateInputSchema: false });
  await writeFile('mergedNistCveApiSchema.json', JSON.stringify(mergedNistCveApiSchema, null, 4));

  tables = Object.keys(mergedNistCveApiSchema.definitions)
    .map(def => new db_table(def, undefinedSafeKeys(mergedNistCveApiSchema.definitions[def].properties)));

  console.log(traverse('cve_item', mergedNistCveApiSchema.definitions['cve_item']));

} catch (err) {
  console.error(err);
}

// console.log(tables);
